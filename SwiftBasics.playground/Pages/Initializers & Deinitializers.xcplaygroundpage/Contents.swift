//MARK: üß© Swift Initializers & Deinitializers

//MARK: - Initializer -
// ‚û§ An initializer is a special method that prepares a new instance of a class, struct, or enum for use.
// ‚û§ It ensures **all stored properties** have initial values before the object is used.
// ‚û§ Defined using the `init` keyword.


// ==========================================================
// 1Ô∏è‚É£ Simple Custom Initializer

struct User {
    var name: String
    var age: Int
    
    init(name: String, age: Int) {
        self.name = name
        self.age = age
        print("‚úÖ User \(name) initialized with age \(age)")
    }
}

let user = User(name: "Mohamed", age: 25)


// ==========================================================
// 2Ô∏è‚É£ Default Initializers

// ‚û§ Swift automatically provides a default initializer if
//    all stored properties have default values.

struct Point {
    var x = 0.0
    var y = 0.0
}

let p1 = Point()
let p2 = Point(x: 3.0, y: 5.0)
print("üìç Points:", p1, p2)


// ==========================================================
// 3Ô∏è‚É£ Memberwise Initializer (Struct Only)

// ‚û§ Swift automatically provides a *memberwise initializer* for structs.
// ‚û§ You can initialize properties directly by name.

struct Size {
    var width: Double
    var height: Double
}

let box = Size(width: 10, height: 5)
print("üì¶ Box size:", box)


// ==========================================================
// 4Ô∏è‚É£ Designated Initializer (Class Only)

// üß† Definition
// ‚û§ A **Designated Initializer** is the main initializer of a class.
// ‚û§ It ensures all stored properties are fully initialized before the class instance is ready.
// ‚û§ Every class must have at least one designated initializer (unless it inherits one).
// ‚û§ Designated initializers always call `super.init()` to initialize superclass properties.

class Vehicle {
    var wheels: Int
    
    // Designated initializer
    init(wheels: Int) {
        self.wheels = wheels
        print("üöò Vehicle initialized with \(wheels) wheels")
    }
}

class Car: Vehicle {
    var brand: String
    
    // Designated initializer
    init(brand: String, wheels: Int) {
        self.brand = brand
        super.init(wheels: wheels)
        print("üöó \(brand) car initialized (Designated)")
    }
}

let truck = Car(brand: "Truck", wheels: 6)


// ==========================================================
// 5Ô∏è‚É£ Convenience Initializer (Class Only)

// üß† Definition
// ‚û§ A **Convenience Initializer** is a *secondary initializer* that calls another initializer
//    in the same class (usually a designated one).
// ‚û§ Used to provide default values or simplify initialization calls.
// ‚û§ Must always call another initializer in the same class using `self.init(...)`
//    ‚Äî it cannot call `super.init()` directly.

class Phone {
    var brand: String
    var model: String
    
    // Designated initializer
    init(brand: String, model: String) {
        self.brand = brand
        self.model = model
        print("üì± Phone initialized with brand: \(brand), model: \(model)")
    }
    
    // Convenience initializer
    convenience init(brand: String) {
        self.init(brand: brand, model: "Default")
        print("üõû Convenience initializer used for \(brand)")
    }
}

let iphone = Phone(brand: "iPhone")
let samsung = Phone(brand: "Samsung", model: "S24")


// ==========================================================
// 6Ô∏è‚É£ Failable Initializer (init?)

// ‚û§ Used when initialization can fail (e.g., invalid input or missing data).

struct Product {
    let name: String
    let price: Double
    
    init?(name: String, price: Double) {
        if price < 0 { return nil }
        self.name = name
        self.price = price
        print("üí∞ Product \(name) created at price \(price)")
    }
}

if let valid = Product(name: "iPhone", price: 999) {
    print("‚úÖ Product:", valid.name)
} else {
    print("‚ùå Failed to create product")
}

if let invalid = Product(name: "Error", price: -5) {
    print("‚úÖ Product:", invalid.name)
} else {
    print("‚ö†Ô∏è Initialization failed due to negative price")
}


// ==========================================================
// 7Ô∏è‚É£ Required Initializer

// ‚û§ Ensures every subclass implements this initializer.

class Shape {
    required init() {
        print("üî∫ Shape initialized")
    }
}

class Circle: Shape {
    var radius: Double = 0.0
    
    required init() {
        super.init()
        print("‚ö™Ô∏è Circle initialized")
    }
}

let c = Circle()


// ==========================================================
// 8Ô∏è‚É£ Initializer Delegation in Structs
//
// ‚û§ Structs can call their own initializers using `self.init(...)`.
// ‚û§ This helps reuse existing initialization logic instead of repeating code.

struct Rectangle {
    var width: Double
    var height: Double
    
    // 1Ô∏è‚É£ Main initializer
    init(width: Double, height: Double) {
        self.width = width
        self.height = height
    }
    
    // 2Ô∏è‚É£ Secondary initializer (for creating a square)
    init(squareWithSide side: Double) {
        // ‚úÖ This delegates to the main initializer
        // Instead of repeating: self.width = side, self.height = side
        self.init(width: side, height: side)
        print("üü• Square initialized")
        
        // ‚ùå If we DID NOT use self.init(...)
        // We would have to manually assign all stored properties like this:
        // self.width = side
        // self.height = side
        // print("üü• Square initialized")
    }
}

let square = Rectangle(squareWithSide: 6)



// ==========================================================
// üß† Definition: Deinitializer

// ‚û§ A **deinitializer** (`deinit`) runs just before a class instance is deallocated.
// ‚û§ Used for cleanup tasks (closing files, releasing memory, removing observers).
// ‚û§ Only classes can have a `deinit`.

class FileHandler {
    let fileName: String
    
    init(fileName: String) {
        self.fileName = fileName
        print("üìÇ Opened file:", fileName)
    }
    
    func readFile() {
        print("üìñ Reading file:", fileName)
    }
    
    deinit {
        print("üßπ Closing file:", fileName)
    }
}

do {
    let file = FileHandler(fileName: "data.txt")
    file.readFile()
} // When the scope ends, deinit is automatically called


// ==========================================================
// üß† Definition: Lazy Property

// ‚û§ A **lazy property** is initialized only when first accessed.
// ‚û§ Useful when initialization is expensive or not always needed.

class DataLoader {
    lazy var data: [Int] = loadData()
    
    func loadData() -> [Int] {
        print("üì¶ Loading data now...")
        return [1, 2, 3, 4, 5]
    }
}

let loader = DataLoader()
print("‚è≥ Accessing data for the first time...")
print(loader.data) // triggers lazy initialization
